import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;

public class Main
	static int[] parent=new int[27];
	static int[] rank=new int[27];
	
	
	public static int findSet(int i){
		if(parent[i]==i){
			return i;
		}
		else{
			return findSet(parent[i]);
		}
		
	}
	
	
	
	
	public static boolean isSameSet(int i,int j){
		return findSet(i)==findSet(j);
	}
	
	
	
	public static void union(int i,int j){
		
		if(!isSameSet(i, j)){
			int x=findSet(i);
			int y=findSet(j);
			
			if(rank[x]<rank[y]){
				parent[x]=y;
			}
			else{
				parent[y]=x;
				if(rank[x]==rank[y]){
					rank[y]+=1;
				}
			}
		}
		
	}
		
	
	
	
	public static void main(String[] args) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		String line;
		StringTokenizer st;
		line=reader.readLine();
		st=new StringTokenizer(line);
		int n=Integer.parseInt(st.nextToken());
		for(int i=0;i<n;i++){
			for(int j=0;j<27;j++){
				parent[j]=j;
				rank[j]=0;
			}
			
			
			while(!(line=reader.readLine()).startsWith("*")){
				
				st=new StringTokenizer(line,"(),");
				int x=(st.nextToken().charAt(0)-65+1);
				int y=(st.nextToken().charAt(0)-65+1);
				union(x, y);
				
			}
			
			
			
			line=reader.readLine();
			st=new StringTokenizer(line,",");
			Map<Integer,Integer> map=new HashMap<>();
			while(st.hasMoreTokens()){
				int p=st.nextToken().charAt(0)-65+1;
				int x=findSet(p);
				if(map.containsKey(x)){
					map.put(x,map.get(x)+1);
				}
				else{
					map.put(x, 1);
				}
				
			}
			
			
			int treeCount=0;
			int acornCount=0;
			for(int k:map.keySet()){
				if(map.get(k)>1){
					treeCount+=1;
				}
				else{
					acornCount+=1;
				}
			}
			
			
			System.out.println("There are "+treeCount+" tree(s) and "+acornCount+" acorn(s).");

			
			
			
			
		}
		
		
		reader.close();
	}

}
